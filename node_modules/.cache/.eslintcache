[{"C:\\Users\\dvanp\\OneDrive\\Desktop\\Bloc\\projects\\pocket-stocks\\pocket-stocks-client\\src\\index.js":"1","C:\\Users\\dvanp\\OneDrive\\Desktop\\Bloc\\projects\\pocket-stocks\\pocket-stocks-client\\src\\routes\\Home.js":"2","C:\\Users\\dvanp\\OneDrive\\Desktop\\Bloc\\projects\\pocket-stocks\\pocket-stocks-client\\src\\routes\\Login.js":"3","C:\\Users\\dvanp\\OneDrive\\Desktop\\Bloc\\projects\\pocket-stocks\\pocket-stocks-client\\src\\routes\\StockDetails.js":"4","C:\\Users\\dvanp\\OneDrive\\Desktop\\Bloc\\projects\\pocket-stocks\\pocket-stocks-client\\src\\routes\\SignUp.js":"5","C:\\Users\\dvanp\\OneDrive\\Desktop\\Bloc\\projects\\pocket-stocks\\pocket-stocks-client\\src\\components\\Header\\Header.js":"6","C:\\Users\\dvanp\\OneDrive\\Desktop\\Bloc\\projects\\pocket-stocks\\pocket-stocks-client\\src\\components\\AddStockPost\\AddStockPost.js":"7","C:\\Users\\dvanp\\OneDrive\\Desktop\\Bloc\\projects\\pocket-stocks\\pocket-stocks-client\\src\\components\\StockHoldings\\StockHoldings.js":"8","C:\\Users\\dvanp\\OneDrive\\Desktop\\Bloc\\projects\\pocket-stocks\\pocket-stocks-client\\src\\App\\App.js":"9","C:\\Users\\dvanp\\OneDrive\\Desktop\\Bloc\\projects\\pocket-stocks\\pocket-stocks-client\\src\\context\\StocksContext.js":"10","C:\\Users\\dvanp\\OneDrive\\Desktop\\Bloc\\projects\\pocket-stocks\\pocket-stocks-client\\src\\API\\FindStocks.js":"11","C:\\Users\\dvanp\\OneDrive\\Desktop\\Bloc\\projects\\pocket-stocks\\pocket-stocks-client\\src\\routes\\UpdatePost\\UpdatePost.js":"12","C:\\Users\\dvanp\\OneDrive\\Desktop\\Bloc\\projects\\pocket-stocks\\pocket-stocks-client\\src\\components\\UpdateStock\\UpdateStock.js":"13","C:\\Users\\dvanp\\OneDrive\\Desktop\\Bloc\\projects\\pocket-stocks\\pocket-stocks-client\\src\\routes\\LandingPage\\LandingPage.js":"14"},{"size":376,"mtime":1612886336656,"results":"15","hashOfConfig":"16"},{"size":697,"mtime":1613129390939,"results":"17","hashOfConfig":"16"},{"size":132,"mtime":1612872626808,"results":"18","hashOfConfig":"16"},{"size":2847,"mtime":1613147033073,"results":"19","hashOfConfig":"16"},{"size":136,"mtime":1612872630770,"results":"20","hashOfConfig":"16"},{"size":198,"mtime":1612874224868,"results":"21","hashOfConfig":"16"},{"size":4030,"mtime":1613146826265,"results":"22","hashOfConfig":"16"},{"size":4201,"mtime":1613131804928,"results":"23","hashOfConfig":"16"},{"size":2596,"mtime":1613149784966,"results":"24","hashOfConfig":"16"},{"size":676,"mtime":1613145229449,"results":"25","hashOfConfig":"16"},{"size":484,"mtime":1612954081813,"results":"26","hashOfConfig":"16"},{"size":321,"mtime":1612966175142,"results":"27","hashOfConfig":"16"},{"size":3742,"mtime":1613039254720,"results":"28","hashOfConfig":"16"},{"size":2288,"mtime":1612983490433,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"4kkath",{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"32"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"C:\\Users\\dvanp\\OneDrive\\Desktop\\Bloc\\projects\\pocket-stocks\\pocket-stocks-client\\src\\index.js",[],["65","66"],"C:\\Users\\dvanp\\OneDrive\\Desktop\\Bloc\\projects\\pocket-stocks\\pocket-stocks-client\\src\\routes\\Home.js",["67","68"],"import React from \"react\";\r\nimport Header from \"../components/Header/Header\";\r\nimport AddStockPost from \"../components/AddStockPost/AddStockPost\";\r\nimport StockHoldings from \"../components/StockHoldings/StockHoldings\";\r\n\r\nconst Home = (props) => {\r\n\r\n  const [ currentMarketPrice, setCurrentMarketPrice ] = React.useState(0);\r\n\r\n  // if (currentMarketPrice !== 0) {\r\n  //   setCurrentMarketPrice(0);\r\n  // } else {\r\n  // }\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <AddStockPost getStockPrice={props.getStockPrice} />\r\n      <StockHoldings\r\n      // ROI={this.props.ROI}\r\n      // currentMarketPrice={this.props.currentMarketPrice}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","C:\\Users\\dvanp\\OneDrive\\Desktop\\Bloc\\projects\\pocket-stocks\\pocket-stocks-client\\src\\routes\\Login.js",[],"C:\\Users\\dvanp\\OneDrive\\Desktop\\Bloc\\projects\\pocket-stocks\\pocket-stocks-client\\src\\routes\\StockDetails.js",["69","70","71"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { StocksContext } from \"../context/StocksContext\";\r\n\r\nconst StockDetails = (props) => {\r\n  const { id } = useParams();\r\n  const { selectedStock, setSelectedStock } = useContext(StocksContext);\r\n  const { selectedTickerSymbol, setSelectedTickerSymbol } = useContext(\r\n    StocksContext\r\n    );\r\n  const [currentPost, setCurrentPost] = React.useState(\"\");\r\n  const [purchase_price, setPurchase_price] = React.useState(0);\r\n  const [ROI, setROI] = React.useState(0);\r\n\r\n  useEffect(() => {\r\n\r\n    const fetchData = async () => {\r\n      try {\r\n        const url = `http://localhost:3000/api/v1/stocks/${id}`;\r\n        const options = {\r\n          method: \"GET\",\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        };\r\n        await fetch(url, options)\r\n          .then((response) => {\r\n            if (!response.ok) {\r\n              throw new Error(\"Error: \" + response.status);\r\n            }\r\n            return response.json();\r\n          })\r\n          .then((responseJson) => {\r\n            // CALLBACK PROP TO USE SET CONTEXT ON TICKER SYMBOL //\r\n            props.setTicker(responseJson.holdings.stock.ticker_symbol);\r\n            // UPDATES THE SELECTED STOCK ON PAGE LOAD //\r\n            setSelectedStock(responseJson.holdings.stock);\r\n            // UPDATES THE POST ON PAGE LOAD //\r\n            setCurrentPost(responseJson.holdings.stock.posting);\r\n            // SETS THE PURCHASE PRICE ON PAGE LOAD //\r\n            setPurchase_price(responseJson.holdings.stock.purchase_price);\r\n          })\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    };\r\n    fetchData();\r\n    // Empty dependency array called here, which makes it run only once on MOUNT //\r\n  }, []);\r\n  \r\n  const updateROI = () => {\r\n    // console.log(props.currentMarketPrice);\r\n    let initial = purchase_price;\r\n    let current = props.currentMarketPrice;\r\n    let ROI = (((current - initial) / initial) * 100).toFixed(2) + \"%\";\r\n    setROI(ROI);\r\n    console.log(ROI);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* Renders only if a stock was selected */}\r\n      <h1>{selectedStock && selectedStock.ticker_symbol}</h1>\r\n      <div>\r\n        <p>Current Market Price: ${props.currentMarketPrice}</p>\r\n      </div>\r\n      <div>\r\n        <p>Purchase price: ${purchase_price}</p>\r\n      </div>\r\n      <div>\r\n        <p>ROI: {ROI}</p>\r\n      </div>\r\n      <div>\r\n        <p>Post: {currentPost}</p>\r\n      </div>\r\n      <button onClick={() => props.getStockPrice(selectedTickerSymbol)}>\r\n        Get current price\r\n      </button>\r\n      <br />\r\n      <button onClick={updateROI}>\r\n        Get ROI\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StockDetails;\r\n","C:\\Users\\dvanp\\OneDrive\\Desktop\\Bloc\\projects\\pocket-stocks\\pocket-stocks-client\\src\\routes\\SignUp.js",[],"C:\\Users\\dvanp\\OneDrive\\Desktop\\Bloc\\projects\\pocket-stocks\\pocket-stocks-client\\src\\components\\Header\\Header.js",[],"C:\\Users\\dvanp\\OneDrive\\Desktop\\Bloc\\projects\\pocket-stocks\\pocket-stocks-client\\src\\components\\AddStockPost\\AddStockPost.js",["72"],"import React, { useState, useContext } from \"react\";\r\nimport { StocksContext } from \"../../context/StocksContext\";\r\nimport \"./AddStockPost.css\";\r\n\r\nconst AddStockPost = (props) => {\r\n  const { addStock, addPosting } = useContext(StocksContext);\r\n  const [ticker_symbol, setTicker_symbol] = useState(\"\");\r\n  const [purchase_price, setPurchase_price] = useState(0);\r\n  const [recommendation_status, setRecommendation_status] = useState(\"Select\");\r\n  const [stock_value, setStock_value] = useState(\"Select\");\r\n  const [posting, setPosting] = useState(\"Enter up to 120 characters in a post\");\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const postData = async () => {\r\n      try {\r\n        const url = \"http://localhost:3000/api/v1/stocks\";\r\n        const options = {\r\n          method: \"POST\",\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            ticker_symbol: ticker_symbol,\r\n            recommendation_status: recommendation_status,\r\n            stock_value: stock_value,\r\n            posting: posting,\r\n            purchase_price: purchase_price\r\n          }),\r\n        };\r\n        await fetch(url, options)\r\n          .then((response) => {\r\n            if (!response.ok) {\r\n              throw new Error(\"Error: \" + response.status);\r\n            }\r\n            return response.json();\r\n          })\r\n          .then((responseJson) => {\r\n            // addPosting(responseJson.holdings.stock.posting);\r\n            addStock(responseJson.holdings.stock);\r\n          });\r\n        } catch (err) {\r\n        console.log(err);\r\n      }\r\n    };\r\n    postData();\r\n  };\r\n\r\n  return (\r\n    <div className=\"addStockSection\">\r\n      <form action=\"submit\">\r\n        <div className=\"form-row\">\r\n          <div className=\"form-column\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"inputTickerSymbol\"\r\n              placeholder=\"Ticker Symbol\"\r\n              value={ticker_symbol}\r\n              onChange={(e) => setTicker_symbol(e.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"form-column\">\r\n            <input\r\n              type=\"number\"\r\n              className=\"inputPurchasePrice\"\r\n              placeholder=\"Purchase Price\"\r\n              value={purchase_price}\r\n              onChange={(e) => setPurchase_price(e.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"form-column\">\r\n            <select\r\n              className=\"chooseStatus\"\r\n              value={recommendation_status}\r\n              onChange={(e) => setRecommendation_status(e.target.value)}\r\n            >\r\n              <option disabled>Select</option>\r\n              <option value=\"BUY\">BUY</option>\r\n              <option value=\"HOLD\">HOLD</option>\r\n              <option value=\"SELL\">SELL</option>\r\n            </select>\r\n          </div>\r\n          <div\r\n            className=\"form-column\"\r\n            value={stock_value}\r\n            onChange={(e) => setStock_value(e.target.value)}\r\n          >\r\n            <select className=\"chooseStockValue\">\r\n              <option disabled>Select</option>\r\n              <option value=\"Overvalued\">Overvalued</option>\r\n              <option value=\"Undervalued\">Undervalued</option>\r\n              <option value=\"Accurate\">Accurate</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n        <div className=\"commentSection\">\r\n          <textarea\r\n            name=\"comment\"\r\n            className=\"textbox\"\r\n            value={posting}\r\n            onChange={(e) => setPosting(e.target.value)}\r\n          />\r\n        </div>\r\n        <div onClick={handleSubmit} className=\"postButton\">\r\n          <button className=\"btn\">Post!</button>\r\n        </div>\r\n        {/* <div className=\"getUpdatedMarketPrices\">\r\n          <button onClick={props.getStockPrice} className=\"btn\">Refresh Prices</button>\r\n        </div> */}\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddStockPost;\r\n","C:\\Users\\dvanp\\OneDrive\\Desktop\\Bloc\\projects\\pocket-stocks\\pocket-stocks-client\\src\\components\\StockHoldings\\StockHoldings.js",["73","74"],"import React, { useEffect, useContext } from \"react\";\r\nimport { StocksContext } from \"../../context/StocksContext\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"./StockHoldings.css\";\r\n\r\nconst StockHoldings = (props) => {\r\n\r\n  const { stocks, setStocks } = useContext(StocksContext);\r\n  const { selectedTickerSymbol, setSelectedTickerSymbol } = useContext(StocksContext);\r\n\r\n  let history = useHistory();\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const url = \"http://localhost:3000/api/v1/stocks\";\r\n        const options = {\r\n          method: \"GET\",\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        };\r\n        await fetch(url, options)\r\n          .then((response) => {\r\n            if (!response.ok) {\r\n              throw new Error(\"Error: \" + response.status);\r\n            }\r\n            return response.json();\r\n          })\r\n          .then((responseJson) => {\r\n            setStocks(responseJson.holdings.stocks);\r\n          });\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    };\r\n    fetchData();\r\n    // Empty dependency array called here, which makes it run only once on MOUNT //\r\n  }, []);\r\n\r\n  const handleDelete = async (e, id) => {\r\n    // Prevents event from sending function to the table row //\r\n    e.stopPropagation();\r\n    try {\r\n      const url = `http://localhost:3000/api/v1/stocks/${id}`;\r\n      const options = {\r\n        method: \"DELETE\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      };\r\n      await fetch(url, options).then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(\"Error: \" + response.status);\r\n        }\r\n        // Find the specified id associated with the stock being deleted, and use filter to remove it and return the new array //\r\n        setStocks(\r\n          stocks.filter((stock) => {\r\n            return stock.id !== id;\r\n          })\r\n        );\r\n      });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  const handleUpdate = (e, id) => {\r\n    // Prevents event from sending function to the table row //\r\n    e.stopPropagation();\r\n    // Addds the following URL to the history //\r\n    history.push(`/stocks/${id}/update`);\r\n  };\r\n\r\n  const handleNavigateStock = (id, ticker_symbol) => {\r\n    setSelectedTickerSymbol(\r\n      ticker_symbol\r\n    );\r\n    history.push(`/stocks/${id}/`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"stockHoldings\">\r\n      <table className=\"holdingsTable\">\r\n        <thead>\r\n          <tr className=\"tableRow\">\r\n            <th scope=\"column1\">Ticker Symbol</th>\r\n            <th scope=\"column2\">Status</th>\r\n            <th scope=\"column3\">Value</th>\r\n            <th scope=\"column6\">Edit</th>\r\n            <th scope=\"column7\">Delete</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {/* If stocks exist, run the code */}\r\n          {stocks &&\r\n            stocks.map((stock) => {\r\n              return (\r\n                <tr\r\n                  key={stock.id}\r\n                  onClick={() => handleNavigateStock(stock.id, stock.ticker_symbol)}\r\n                  className=\"trow\"\r\n                >\r\n                  <td>{stock.ticker_symbol}</td>\r\n                  <td>{stock.recommendation_status}</td>\r\n                  <td>{stock.stock_value}</td>\r\n                  <td>\r\n                    <button\r\n                      onClick={(e) => handleUpdate(e, stock.id)}\r\n                      className=\"btn\"\r\n                    >\r\n                      Edit\r\n                    </button>\r\n                  </td>\r\n                  <td>\r\n                    {/* Use arrow function as a reference to the function so it executes on delete */}\r\n                    <button\r\n                      onClick={(e) => handleDelete(e, stock.id)}\r\n                      className=\"btn\"\r\n                    >\r\n                      Delete\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n              );\r\n            })}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StockHoldings;\r\n","C:\\Users\\dvanp\\OneDrive\\Desktop\\Bloc\\projects\\pocket-stocks\\pocket-stocks-client\\src\\App\\App.js",["75"],"import React, { useState } from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport Home from \"../routes/Home\";\r\nimport LandingPage from \"../routes/LandingPage/LandingPage\";\r\nimport Login from \"../routes/Login\";\r\nimport SignUp from \"../routes/SignUp\";\r\nimport StockDetails from \"../routes/StockDetails\";\r\nimport UpdatePost from \"../routes/UpdatePost/UpdatePost\";\r\nimport \"./App.css\";\r\nconst API_TOKEN = process.env.REACT_APP_POCKET_STOCKS_KEY;\r\n\r\n\r\nconst App = () => {\r\n  const [currentMarketPrice, setCurrentMarketPrice] = React.useState(0);\r\n  const [selectedTickerSymbol, setSelectedTickerSymbol] = React.useState(null);\r\n\r\n  // UPDATES THE TICKER SYMBOL SO IT CAN BE USED IN THE API CALL //\r\n  const setTicker = (chosenTickerSymbol) => {\r\n    setSelectedTickerSymbol(chosenTickerSymbol);\r\n  };\r\n\r\n  const getStockPrice = (ticker) => {\r\n    fetch(\r\n      `https://twelve-data1.p.rapidapi.com/price?symbol=${selectedTickerSymbol}&outputsize=30&format=json`,\r\n      {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"x-rapidapi-key\":\r\n            `${API_TOKEN}`,\r\n          \"x-rapidapi-host\": \"twelve-data1.p.rapidapi.com\",\r\n        },\r\n      }\r\n    )\r\n      .then((response) => {\r\n        if (response.ok) {\r\n          return response.json();\r\n        }\r\n        throw new Error(response.statusText);\r\n      })\r\n      .then((responseJson) => {\r\n        let price = parseFloat(responseJson.price);\r\n        let final = price.toFixed(2);\r\n        setCurrentMarketPrice(final);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"formContainer\">\r\n      <Switch>\r\n        <Route exact path=\"/\" component={LandingPage} />\r\n        <Route\r\n          exact\r\n          path=\"/home\"\r\n          render={() => {\r\n            return (\r\n              <Home\r\n                getStockPrice={getStockPrice}\r\n              />\r\n            );\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/stocks/:id\"\r\n          render={() => {\r\n            return (\r\n              <StockDetails\r\n                getStockPrice={getStockPrice}\r\n                selectedTickerSymbol={selectedTickerSymbol}\r\n                setTicker={setTicker}\r\n                currentMarketPrice={currentMarketPrice}\r\n              />\r\n            );\r\n          }}\r\n        />\r\n        <Route exact path=\"/stocks/:id/update\" component={UpdatePost} />\r\n        <Route exact path=\"/login\" component={Login} />\r\n        <Route exact path=\"/signup\" component={SignUp} />\r\n      </Switch>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","C:\\Users\\dvanp\\OneDrive\\Desktop\\Bloc\\projects\\pocket-stocks\\pocket-stocks-client\\src\\context\\StocksContext.js",[],"C:\\Users\\dvanp\\OneDrive\\Desktop\\Bloc\\projects\\pocket-stocks\\pocket-stocks-client\\src\\API\\FindStocks.js",[],"C:\\Users\\dvanp\\OneDrive\\Desktop\\Bloc\\projects\\pocket-stocks\\pocket-stocks-client\\src\\routes\\UpdatePost\\UpdatePost.js",[],"C:\\Users\\dvanp\\OneDrive\\Desktop\\Bloc\\projects\\pocket-stocks\\pocket-stocks-client\\src\\components\\UpdateStock\\UpdateStock.js",["76","77"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\n\r\nconst UpdateStock = (props) => {\r\n  const [ticker_symbol, setTicker_symbol] = useState(\"\");\r\n  const [recommendation_status, setRecommendation_status] = useState(\"Select\");\r\n  const [stock_value, setStock_value] = useState(\"Select\");\r\n  const { id } = useParams();\r\n  let history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const url = `http://localhost:3000/api/v1/stocks/${id}`;\r\n        const options = {\r\n          method: \"GET\",\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        };\r\n        await fetch(url, options)\r\n          .then((response) => {\r\n            if (!response.ok) {\r\n              throw new Error(\"Error: \" + response.status);\r\n            }\r\n            return response.json();\r\n          })\r\n          .then((responseJson) => {\r\n            setTicker_symbol(responseJson.holdings.stock.ticker_symbol);\r\n            setRecommendation_status(\r\n              responseJson.holdings.stock.recommendation_status\r\n            );\r\n            setStock_value(responseJson.holdings.stock.stock_value);\r\n          });\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const url = `http://localhost:3000/api/v1/stocks/${id}`;\r\n      const options = {\r\n        method: \"PUT\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          ticker_symbol: ticker_symbol,\r\n          recommendation_status: recommendation_status,\r\n          stock_value: stock_value,\r\n        }),\r\n      };\r\n      await fetch(url, options)\r\n        .then((response) => {\r\n          if (!response.ok) {\r\n            throw new Error(\"Error: \" + response.status);\r\n          }\r\n          return response.json();\r\n        })\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n    // Addds the following URL to the history //\r\n    history.push(\"/home\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form action=\"submit\">\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"ticker_symbol\">Ticker Symbol</label>\r\n          <input\r\n            value={ticker_symbol}\r\n            onChange={(e) => setTicker_symbol(e.target.value)}\r\n            type=\"text\"\r\n            className=\"ticker_symbol\"\r\n          />\r\n        </div>\r\n        <label htmlFor=\"recommendation_status\">BUY/HOLD/SELL</label>\r\n        <select\r\n          className=\"chooseStatus\"\r\n          value={recommendation_status}\r\n          onChange={(e) => setRecommendation_status(e.target.value)}\r\n        >\r\n          <option disabled>Select</option>\r\n          <option value=\"BUY\">BUY</option>\r\n          <option value=\"HOLD\">HOLD</option>\r\n          <option value=\"SELL\">SELL</option>\r\n        </select>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"stock_value\">VALUE</label>\r\n          <select\r\n            className=\"chooseStatus\"\r\n            value={stock_value}\r\n            onChange={(e) => setStock_value(e.target.value)}\r\n          >\r\n            <option disabled>Select</option>\r\n            <option value=\"Overvalued\">Overvalued</option>\r\n            <option value=\"Undervalued\">Undervalued</option>\r\n            <option value=\"Accurate\">Accurate</option>\r\n          </select>\r\n        </div>\r\n        <button type=\"submit\" onClick={handleSubmit} className=\"btn\">\r\n          Submit\r\n        </button>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UpdateStock;\r\n","C:\\Users\\dvanp\\OneDrive\\Desktop\\Bloc\\projects\\pocket-stocks\\pocket-stocks-client\\src\\routes\\LandingPage\\LandingPage.js",[],{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":8,"column":11,"nodeType":"84","messageId":"85","endLine":8,"endColumn":29},{"ruleId":"82","severity":1,"message":"86","line":8,"column":31,"nodeType":"84","messageId":"85","endLine":8,"endColumn":52},{"ruleId":"82","severity":1,"message":"87","line":1,"column":40,"nodeType":"84","messageId":"85","endLine":1,"endColumn":48},{"ruleId":"82","severity":1,"message":"88","line":8,"column":33,"nodeType":"84","messageId":"85","endLine":8,"endColumn":56},{"ruleId":"89","severity":1,"message":"90","line":50,"column":6,"nodeType":"91","endLine":50,"endColumn":8,"suggestions":"92"},{"ruleId":"82","severity":1,"message":"93","line":6,"column":21,"nodeType":"84","messageId":"85","endLine":6,"endColumn":31},{"ruleId":"82","severity":1,"message":"94","line":9,"column":11,"nodeType":"84","messageId":"85","endLine":9,"endColumn":31},{"ruleId":"89","severity":1,"message":"95","line":39,"column":6,"nodeType":"91","endLine":39,"endColumn":8,"suggestions":"96"},{"ruleId":"82","severity":1,"message":"87","line":1,"column":17,"nodeType":"84","messageId":"85","endLine":1,"endColumn":25},{"ruleId":"82","severity":1,"message":"97","line":1,"column":38,"nodeType":"84","messageId":"85","endLine":1,"endColumn":48},{"ruleId":"89","severity":1,"message":"98","line":41,"column":6,"nodeType":"91","endLine":41,"endColumn":8,"suggestions":"99"},"no-native-reassign",["100"],"no-negated-in-lhs",["101"],"no-unused-vars","'currentMarketPrice' is assigned a value but never used.","Identifier","unusedVar","'setCurrentMarketPrice' is assigned a value but never used.","'useState' is defined but never used.","'setSelectedTickerSymbol' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'id', 'props', and 'setSelectedStock'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["102"],"'addPosting' is assigned a value but never used.","'selectedTickerSymbol' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setStocks'. Either include it or remove the dependency array.",["103"],"'useContext' is defined but never used.","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["104"],"no-global-assign","no-unsafe-negation",{"desc":"105","fix":"106"},{"desc":"107","fix":"108"},{"desc":"109","fix":"110"},"Update the dependencies array to be: [id, props, setSelectedStock]",{"range":"111","text":"112"},"Update the dependencies array to be: [setStocks]",{"range":"113","text":"114"},"Update the dependencies array to be: [id]",{"range":"115","text":"116"},[1878,1880],"[id, props, setSelectedStock]",[1248,1250],"[setStocks]",[1387,1389],"[id]"]