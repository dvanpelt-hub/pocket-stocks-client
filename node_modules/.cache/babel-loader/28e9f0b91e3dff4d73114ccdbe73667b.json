{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dvanp\\\\OneDrive\\\\Desktop\\\\Bloc\\\\projects\\\\pocket-stocks\\\\pocket-stocks-client\\\\src\\\\routes\\\\StockDetails.js\";\nimport React, { useContext, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { StocksContext } from \"../context/StocksContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  id\n} = useParams();\nconst {\n  selectedStock,\n  setSelectedStock\n} = useContext(StocksContext);\nconst {\n  selectedTickerSymbol,\n  setSelectedTickerSymbol\n} = useContext(StocksContext);\n\nclass StockDetails extends React.Component {\n  render() {\n    useEffect(() => {\n      setSelectedTickerSymbol(selectedTickerSymbol);\n\n      const fetchData = async () => {\n        try {\n          const url = `http://localhost:3000/api/v1/stocks/${id}`;\n          const options = {\n            method: \"GET\",\n            headers: {\n              Accept: \"application/json\",\n              \"Content-Type\": \"application/json\"\n            }\n          };\n          await fetch(url, options).then(response => {\n            if (!response.ok) {\n              throw new Error(\"Error: \" + response.status);\n            }\n\n            return response.json();\n          }).then(responseJson => {\n            setSelectedStock(responseJson.holdings.stock);\n          });\n        } catch (err) {\n          console.log(err);\n        }\n      };\n\n      fetchData(); // Empty dependency array called here, which makes it run only once on MOUNT //\n    }, []);\n\n    const getData = props => {\n      this.props.getStockPrice;\n    };\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [selectedStock && selectedStock.ticker_symbol, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: props.getData,\n        children: \"Get Current Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default StockDetails;","map":{"version":3,"sources":["C:/Users/dvanp/OneDrive/Desktop/Bloc/projects/pocket-stocks/pocket-stocks-client/src/routes/StockDetails.js"],"names":["React","useContext","useEffect","useParams","StocksContext","id","selectedStock","setSelectedStock","selectedTickerSymbol","setSelectedTickerSymbol","StockDetails","Component","render","fetchData","url","options","method","headers","Accept","fetch","then","response","ok","Error","status","json","responseJson","holdings","stock","err","console","log","getData","props","getStockPrice","ticker_symbol"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,QAA6C,OAA7C;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,aAAT,QAA8B,0BAA9B;;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAASF,SAAS,EAAxB;AACA,MAAM;AAAEG,EAAAA,aAAF;AAAiBC,EAAAA;AAAjB,IAAsCN,UAAU,CAACG,aAAD,CAAtD;AACA,MAAM;AAAEI,EAAAA,oBAAF;AAAwBC,EAAAA;AAAxB,IAAoDR,UAAU,CAACG,aAAD,CAApE;;AAEA,MAAMM,YAAN,SAA2BV,KAAK,CAACW,SAAjC,CAA2C;AACzCC,EAAAA,MAAM,GAAG;AACPV,IAAAA,SAAS,CAAC,MAAM;AACdO,MAAAA,uBAAuB,CAACD,oBAAD,CAAvB;;AACA,YAAMK,SAAS,GAAG,YAAY;AAC5B,YAAI;AACF,gBAAMC,GAAG,GAAI,uCAAsCT,EAAG,EAAtD;AACA,gBAAMU,OAAO,GAAG;AACdC,YAAAA,MAAM,EAAE,KADM;AAEdC,YAAAA,OAAO,EAAE;AACPC,cAAAA,MAAM,EAAE,kBADD;AAEP,8BAAgB;AAFT;AAFK,WAAhB;AAOA,gBAAMC,KAAK,CAACL,GAAD,EAAMC,OAAN,CAAL,CACHK,IADG,CACGC,QAAD,IAAc;AAClB,gBAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AAChB,oBAAM,IAAIC,KAAJ,CAAU,YAAYF,QAAQ,CAACG,MAA/B,CAAN;AACD;;AACD,mBAAOH,QAAQ,CAACI,IAAT,EAAP;AACD,WANG,EAOHL,IAPG,CAOGM,YAAD,IAAkB;AACtBnB,YAAAA,gBAAgB,CAACmB,YAAY,CAACC,QAAb,CAAsBC,KAAvB,CAAhB;AACD,WATG,CAAN;AAUD,SAnBD,CAmBE,OAAOC,GAAP,EAAY;AACZC,UAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF,OAvBD;;AAwBAhB,MAAAA,SAAS,GA1BK,CA2Bd;AACD,KA5BQ,EA4BN,EA5BM,CAAT;;AA6BA,UAAMmB,OAAO,GAAIC,KAAD,IAAW;AACzB,WAAKA,KAAL,CAAWC,aAAX;AACD,KAFD;;AAGA,wBACE;AAAA,iBAEG5B,aAAa,IAAIA,aAAa,CAAC6B,aAFlC,eAGE;AAAQ,QAAA,OAAO,EAAEF,KAAK,CAACD,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AASD;;AA3CwC;;AA8C3C,eAAetB,YAAf","sourcesContent":["import React, { useContext, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { StocksContext } from \"../context/StocksContext\";\r\n\r\nconst { id } = useParams();\r\nconst { selectedStock, setSelectedStock } = useContext(StocksContext);\r\nconst { selectedTickerSymbol, setSelectedTickerSymbol } = useContext(StocksContext); \r\n\r\nclass StockDetails extends React.Component {\r\n  render() {\r\n    useEffect(() => {\r\n      setSelectedTickerSymbol(selectedTickerSymbol);\r\n      const fetchData = async () => {\r\n        try {\r\n          const url = `http://localhost:3000/api/v1/stocks/${id}`;\r\n          const options = {\r\n            method: \"GET\",\r\n            headers: {\r\n              Accept: \"application/json\",\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n          };\r\n          await fetch(url, options)\r\n            .then((response) => {\r\n              if (!response.ok) {\r\n                throw new Error(\"Error: \" + response.status);\r\n              }\r\n              return response.json();\r\n            })\r\n            .then((responseJson) => {\r\n              setSelectedStock(responseJson.holdings.stock);\r\n            });\r\n        } catch (err) {\r\n          console.log(err);\r\n        }\r\n      };\r\n      fetchData();\r\n      // Empty dependency array called here, which makes it run only once on MOUNT //\r\n    }, []);\r\n    const getData = (props) => {\r\n      this.props.getStockPrice\r\n    }\r\n    return (\r\n      <div>\r\n        {/* Renders only if a stock was selected */}\r\n        {selectedStock && selectedStock.ticker_symbol}\r\n        <button onClick={props.getData}>\r\n          Get Current Data\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StockDetails;\r\n"]},"metadata":{},"sourceType":"module"}