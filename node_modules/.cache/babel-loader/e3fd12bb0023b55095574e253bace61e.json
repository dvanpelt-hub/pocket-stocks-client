{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dvanp\\\\OneDrive\\\\Desktop\\\\Bloc\\\\projects\\\\pocket-stocks\\\\pocket-stocks-client\\\\src\\\\routes\\\\StockDetails.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { StocksContext } from \"../context/StocksContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst StockDetails = props => {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const {\n    selectedStock,\n    setSelectedStock\n  } = useContext(StocksContext);\n  const {\n    selectedTickerSymbol,\n    setSelectedTickerSymbol\n  } = useContext(StocksContext);\n  const [currentPost, setCurrentPost] = React.useState(\"\");\n  const [purchase_price, setPurchase_price] = React.useState(0);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const url = `http://localhost:3000/api/v1/stocks/${id}`;\n        const options = {\n          method: \"GET\",\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\"\n          }\n        };\n        await fetch(url, options).then(response => {\n          if (!response.ok) {\n            throw new Error(\"Error: \" + response.status);\n          }\n\n          return response.json();\n        }).then(responseJson => {\n          console.log(responseJson.holdings.stock.purchase_price); // CALLBACK PROP TO USE SET CONTEXT ON TICKER SYMBOL //\n\n          props.setTicker(responseJson.holdings.stock.ticker_symbol); // UPDATES THE SELECTED STOCK ON PAGE LOAD //\n\n          setSelectedStock(responseJson.holdings.stock);\n          setCurrentPost(responseJson.holdings.stock.posting);\n          setPurchase_price(responseJson.holdings.stock.purchase_price);\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    fetchData(); // Empty dependency array called here, which makes it run only once on MOUNT //\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [selectedStock && selectedStock.ticker_symbol, /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Current Market Price: $\", props.currentMarketPrice]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Purchase price: \", purchase_price]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Post: \", currentPost]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => props.getStockPrice(selectedTickerSymbol),\n      children: \"Update\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n\n_s(StockDetails, \"IT97MUw2zgVehKhUvsMRq2+w+ZE=\", false, function () {\n  return [useParams];\n});\n\n_c = StockDetails;\nexport default StockDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"StockDetails\");","map":{"version":3,"sources":["C:/Users/dvanp/OneDrive/Desktop/Bloc/projects/pocket-stocks/pocket-stocks-client/src/routes/StockDetails.js"],"names":["React","useContext","useEffect","useState","useParams","StocksContext","StockDetails","props","id","selectedStock","setSelectedStock","selectedTickerSymbol","setSelectedTickerSymbol","currentPost","setCurrentPost","purchase_price","setPurchase_price","fetchData","url","options","method","headers","Accept","fetch","then","response","ok","Error","status","json","responseJson","console","log","holdings","stock","setTicker","ticker_symbol","posting","err","currentMarketPrice","getStockPrice"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,aAAT,QAA8B,0BAA9B;;;AAEA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC9B,QAAM;AAAEC,IAAAA;AAAF,MAASJ,SAAS,EAAxB;AACA,QAAM;AAAEK,IAAAA,aAAF;AAAiBC,IAAAA;AAAjB,MAAsCT,UAAU,CAACI,aAAD,CAAtD;AACA,QAAM;AAAEM,IAAAA,oBAAF;AAAwBC,IAAAA;AAAxB,MAAoDX,UAAU,CAClEI,aADkE,CAApE;AAGA,QAAM,CAACQ,WAAD,EAAcC,cAAd,IAAgCd,KAAK,CAACG,QAAN,CAAe,EAAf,CAAtC;AACA,QAAM,CAACY,cAAD,EAAiBC,iBAAjB,IAAsChB,KAAK,CAACG,QAAN,CAAe,CAAf,CAA5C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AAEd,UAAMe,SAAS,GAAG,YAAY;AAC5B,UAAI;AACF,cAAMC,GAAG,GAAI,uCAAsCV,EAAG,EAAtD;AACA,cAAMW,OAAO,GAAG;AACdC,UAAAA,MAAM,EAAE,KADM;AAEdC,UAAAA,OAAO,EAAE;AACPC,YAAAA,MAAM,EAAE,kBADD;AAEP,4BAAgB;AAFT;AAFK,SAAhB;AAOA,cAAMC,KAAK,CAACL,GAAD,EAAMC,OAAN,CAAL,CACHK,IADG,CACGC,QAAD,IAAc;AAClB,cAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AAChB,kBAAM,IAAIC,KAAJ,CAAU,YAAYF,QAAQ,CAACG,MAA/B,CAAN;AACD;;AACD,iBAAOH,QAAQ,CAACI,IAAT,EAAP;AACD,SANG,EAOHL,IAPG,CAOGM,YAAD,IAAkB;AACtBC,UAAAA,OAAO,CAACC,GAAR,CAAYF,YAAY,CAACG,QAAb,CAAsBC,KAAtB,CAA4BnB,cAAxC,EADsB,CAEtB;;AACAR,UAAAA,KAAK,CAAC4B,SAAN,CAAgBL,YAAY,CAACG,QAAb,CAAsBC,KAAtB,CAA4BE,aAA5C,EAHsB,CAItB;;AACA1B,UAAAA,gBAAgB,CAACoB,YAAY,CAACG,QAAb,CAAsBC,KAAvB,CAAhB;AACApB,UAAAA,cAAc,CAACgB,YAAY,CAACG,QAAb,CAAsBC,KAAtB,CAA4BG,OAA7B,CAAd;AACArB,UAAAA,iBAAiB,CAACc,YAAY,CAACG,QAAb,CAAsBC,KAAtB,CAA4BnB,cAA7B,CAAjB;AACD,SAfG,CAAN;AAgBD,OAzBD,CAyBE,OAAOuB,GAAP,EAAY;AACZP,QAAAA,OAAO,CAACC,GAAR,CAAYM,GAAZ;AACD;AACF,KA7BD;;AA8BArB,IAAAA,SAAS,GAhCK,CAiCd;AACD,GAlCQ,EAkCN,EAlCM,CAAT;AAoCA,sBACE;AAAA,eAEGR,aAAa,IAAIA,aAAa,CAAC2B,aAFlC,eAGE;AAAA,6BACE;AAAA,8CAA4B7B,KAAK,CAACgC,kBAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAHF,eAME;AAAA,qCACmBxB,cADnB;AAAA;AAAA;AAAA;AAAA;AAAA,YANF,eASE;AAAA,6BACE;AAAA,6BAAUF,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YATF,eAYE;AAAQ,MAAA,OAAO,EAAE,MAAMN,KAAK,CAACiC,aAAN,CAAoB7B,oBAApB,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAZF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,CA/DD;;GAAML,Y;UACWF,S;;;KADXE,Y;AAiEN,eAAeA,YAAf","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { StocksContext } from \"../context/StocksContext\";\r\n\r\nconst StockDetails = (props) => {\r\n  const { id } = useParams();\r\n  const { selectedStock, setSelectedStock } = useContext(StocksContext);\r\n  const { selectedTickerSymbol, setSelectedTickerSymbol } = useContext(\r\n    StocksContext\r\n    );\r\n  const [currentPost, setCurrentPost] = React.useState(\"\");\r\n  const [purchase_price, setPurchase_price] = React.useState(0);\r\n\r\n  useEffect(() => {\r\n\r\n    const fetchData = async () => {\r\n      try {\r\n        const url = `http://localhost:3000/api/v1/stocks/${id}`;\r\n        const options = {\r\n          method: \"GET\",\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        };\r\n        await fetch(url, options)\r\n          .then((response) => {\r\n            if (!response.ok) {\r\n              throw new Error(\"Error: \" + response.status);\r\n            }\r\n            return response.json();\r\n          })\r\n          .then((responseJson) => {\r\n            console.log(responseJson.holdings.stock.purchase_price);\r\n            // CALLBACK PROP TO USE SET CONTEXT ON TICKER SYMBOL //\r\n            props.setTicker(responseJson.holdings.stock.ticker_symbol);\r\n            // UPDATES THE SELECTED STOCK ON PAGE LOAD //\r\n            setSelectedStock(responseJson.holdings.stock);\r\n            setCurrentPost(responseJson.holdings.stock.posting);\r\n            setPurchase_price(responseJson.holdings.stock.purchase_price);\r\n          })\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    };\r\n    fetchData();\r\n    // Empty dependency array called here, which makes it run only once on MOUNT //\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {/* Renders only if a stock was selected */}\r\n      {selectedStock && selectedStock.ticker_symbol}\r\n      <div>\r\n        <h1>Current Market Price: ${props.currentMarketPrice}</h1>\r\n      </div>\r\n      <div>\r\n        Purchase price: {purchase_price}\r\n      </div>\r\n      <div>\r\n        <p>Post: {currentPost}</p>\r\n      </div>\r\n      <button onClick={() => props.getStockPrice(selectedTickerSymbol)}>\r\n        Update\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StockDetails;\r\n"]},"metadata":{},"sourceType":"module"}