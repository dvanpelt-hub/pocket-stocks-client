{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dvanp\\\\OneDrive\\\\Desktop\\\\Bloc\\\\projects\\\\pocket-stocks\\\\pocket-stocks-client\\\\src\\\\routes\\\\StockDetails.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { StocksContext } from \"../context/StocksContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst StockDetails = props => {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const {\n    selectedStock,\n    setSelectedStock\n  } = useContext(StocksContext);\n  const {\n    selectedTickerSymbol,\n    setSelectedTickerSymbol\n  } = useContext(StocksContext);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const url = `http://localhost:3000/api/v1/stocks/${id}`;\n        const options = {\n          method: \"GET\",\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\"\n          }\n        };\n        await fetch(url, options).then(response => {\n          if (!response.ok) {\n            throw new Error(\"Error: \" + response.status);\n          }\n\n          return response.json();\n        }).then(responseJson => {\n          setSelectedStock(responseJson.holdings.stock); // console.log(selectedStock.ticker_symbol);\n          // this.setState = {\n          //   selectedTickerSymbol: selectedStock.ticker_symbol\n          // }\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    fetchData(); // Empty dependency array called here, which makes it run only once on MOUNT //\n  }, []);\n\n  const updateTicker = () => {\n    console.log(selectedStock.ticker_symbol);\n    props.setTicker(selectedStock.ticker_symbol);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [selectedStock && selectedStock.ticker_symbol, /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: props.getStockPrice,\n      children: \"Get Current Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => console.log(selectedStock.ticker_symbol),\n      children: \"Ticker Symbol\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: updateTicker,\n      children: \"Test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n_s(StockDetails, \"TkQDk/9F0hPgk4IQ1ewU0VwLcMc=\", false, function () {\n  return [useParams];\n});\n\n_c = StockDetails;\nexport default StockDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"StockDetails\");","map":{"version":3,"sources":["C:/Users/dvanp/OneDrive/Desktop/Bloc/projects/pocket-stocks/pocket-stocks-client/src/routes/StockDetails.js"],"names":["React","useContext","useEffect","useParams","StocksContext","StockDetails","props","id","selectedStock","setSelectedStock","selectedTickerSymbol","setSelectedTickerSymbol","fetchData","url","options","method","headers","Accept","fetch","then","response","ok","Error","status","json","responseJson","holdings","stock","err","console","log","updateTicker","ticker_symbol","setTicker","getStockPrice"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,QAA6C,OAA7C;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,aAAT,QAA8B,0BAA9B;;;AAEA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC9B,QAAM;AAAEC,IAAAA;AAAF,MAASJ,SAAS,EAAxB;AACA,QAAM;AAAEK,IAAAA,aAAF;AAAiBC,IAAAA;AAAjB,MAAsCR,UAAU,CAACG,aAAD,CAAtD;AACA,QAAM;AAAEM,IAAAA,oBAAF;AAAwBC,IAAAA;AAAxB,MAAoDV,UAAU,CAACG,aAAD,CAApE;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,SAAS,GAAG,YAAY;AAC5B,UAAI;AACF,cAAMC,GAAG,GAAI,uCAAsCN,EAAG,EAAtD;AACA,cAAMO,OAAO,GAAG;AACdC,UAAAA,MAAM,EAAE,KADM;AAEdC,UAAAA,OAAO,EAAE;AACPC,YAAAA,MAAM,EAAE,kBADD;AAEP,4BAAgB;AAFT;AAFK,SAAhB;AAOA,cAAMC,KAAK,CAACL,GAAD,EAAMC,OAAN,CAAL,CACHK,IADG,CACGC,QAAD,IAAc;AAClB,cAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AAChB,kBAAM,IAAIC,KAAJ,CAAU,YAAYF,QAAQ,CAACG,MAA/B,CAAN;AACD;;AACD,iBAAOH,QAAQ,CAACI,IAAT,EAAP;AACD,SANG,EAOHL,IAPG,CAOGM,YAAD,IAAkB;AACtBhB,UAAAA,gBAAgB,CAACgB,YAAY,CAACC,QAAb,CAAsBC,KAAvB,CAAhB,CADsB,CAEtB;AACA;AACA;AACA;AACD,SAbG,CAAN;AAcD,OAvBD,CAuBE,OAAOC,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF,KA3BD;;AA4BAhB,IAAAA,SAAS,GA7BK,CA8Bd;AACD,GA/BQ,EA+BN,EA/BM,CAAT;;AAiCA,QAAMmB,YAAY,GAAG,MAAM;AACzBF,IAAAA,OAAO,CAACC,GAAR,CAAYtB,aAAa,CAACwB,aAA1B;AACA1B,IAAAA,KAAK,CAAC2B,SAAN,CAAgBzB,aAAa,CAACwB,aAA9B;AACD,GAHD;;AAKA,sBACE;AAAA,eAEGxB,aAAa,IAAIA,aAAa,CAACwB,aAFlC,eAGE;AAAQ,MAAA,OAAO,EAAE1B,KAAK,CAAC4B,aAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,eAME;AAAQ,MAAA,OAAO,EAAE,MAAML,OAAO,CAACC,GAAR,CAAYtB,aAAa,CAACwB,aAA1B,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YANF,eASE;AAAQ,MAAA,OAAO,EAAED,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YATF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CA1DD;;GAAM1B,Y;UACWF,S;;;KADXE,Y;AA4DN,eAAeA,YAAf","sourcesContent":["import React, { useContext, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { StocksContext } from \"../context/StocksContext\";\r\n\r\nconst StockDetails = (props) => {\r\n  const { id } = useParams();\r\n  const { selectedStock, setSelectedStock } = useContext(StocksContext);\r\n  const { selectedTickerSymbol, setSelectedTickerSymbol } = useContext(StocksContext); \r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const url = `http://localhost:3000/api/v1/stocks/${id}`;\r\n        const options = {\r\n          method: \"GET\",\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        };\r\n        await fetch(url, options)\r\n          .then((response) => {\r\n            if (!response.ok) {\r\n              throw new Error(\"Error: \" + response.status);\r\n            }\r\n            return response.json();\r\n          })\r\n          .then((responseJson) => {\r\n            setSelectedStock(responseJson.holdings.stock);\r\n            // console.log(selectedStock.ticker_symbol);\r\n            // this.setState = {\r\n            //   selectedTickerSymbol: selectedStock.ticker_symbol\r\n            // }\r\n          });\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    };\r\n    fetchData();\r\n    // Empty dependency array called here, which makes it run only once on MOUNT //\r\n  }, []);\r\n\r\n  const updateTicker = () => {\r\n    console.log(selectedStock.ticker_symbol);\r\n    props.setTicker(selectedStock.ticker_symbol);\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      {/* Renders only if a stock was selected */}\r\n      {selectedStock && selectedStock.ticker_symbol}\r\n      <button onClick={props.getStockPrice}>\r\n        Get Current Data\r\n      </button>\r\n      <button onClick={() => console.log(selectedStock.ticker_symbol)}>\r\n        Ticker Symbol\r\n      </button>\r\n      <button onClick={updateTicker}>\r\n        Test\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StockDetails;\r\n"]},"metadata":{},"sourceType":"module"}